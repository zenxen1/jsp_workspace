<교육 진행 일정>
------------------------------------------------
1개월
------------------------------------------------
PG : HTML+Javascript, JQuery, Ajax, Node.js
DB : Oracle, MySQL, Mariadb.. 

6월27일 : HTML,Javascript
	오라클 및 기타 DB
7월30일 : 개인 프로젝트 발표

------------------------------------------------
2개월
------------------------------------------------
PG : Java
8월1일 : 자바시작(팀구성)
9월9일 : 팀 프로젝트발표
	ex)POS,채팅, PC방 관리프로그램, 응용기반 SNS, 쇼핑몰, Editplus등 편집기, 게임
------------------------------------------------
3개월
------------------------------------------------
PG : JSP+Spring , 각종 프레임웍 (Mybatis, HIbernate, JPA)
9월19일 : 웹프로그래밍 시작 (엔터프라이즈 급 기업용)
10월 21일 : 팀 프로젝트 발표

------------------------------------------------
4개월
------------------------------------------------
안드로이드
10월 24일 : 안드로이드, C언어 시작
11월 25일 : 프로젝트 발표

------------------------------------------------
5개월
------------------------------------------------
C, IOT
11월 28일 : IOT시작(통신 기반 BT)
12월 27일 : 프로젝트 발표

------------------------------------------------
6개월
------------------------------------------------
프로젝트 진행 + 최신기술 수업

=========================================
1일차)
editplus

html 태그 : http://www.w3schools.com/ 
DBMS (DataBaseManagementSystem)

강사님 성함 : 민진호
이메일 : zino1187@naver.com
블로그 : blog.naver.com/zino1187
연락처 : 010-2867-9055
=========================================
2일차)

1. 프로그램이란? 
컴퓨터를 동작시키기 위한 명0령어 집합

2. 컴퓨터의 동작 원리
연산처리장치 (cpu) - 주기억장치(Ram) - 보조기억장치(HD)

3. 명령어를 어떻게 작성하는가?

==========================================
3일차)

프로세스 - cpu의 처리하기위해 메모리에 올려진 data의 집합

컴퓨터에게 일 시키려면 일거리를 제공해야 한다!!
메모리에 데이터를 올리는 방법은 변수 선언이다.
변수에 대입되는 값을 상수라 부른다.
데이터의 종류는 문자 숫자 논리값
연산자 : 메모리에 올라온 데이터에 대해 어떤 처리를 할지를 결정하는 기호
연산자의 종류 : 
산술연산자: = - * / % ++ --
비교연산자: 왼쪽이 기준 > < >= <=
논리연산자: &&(AND) || (OR) !(not)
삼항연산자 :  (ture or false) ? left : right
대입연산자 : 
 
===========================================
4일차)

기초문법(공통적인)
1.변수선언 - 컴퓨터에게 일거리 제공, 메모리에 data를 로딩시킴
2.연산자 - 메모리에 올라온 Data를 어떻게 처리할지 결정하는 기호
	삼항연산자 (단 두가지의 경우의 논리만 처리)
3.조건문?- 특정영역을 조건에 따라 수행할지 여부를 결정해주는 문자(실행부를 제어함)
4.반복문
5.
6.
7.
============================================
5일차)
1.변수
2.연산자
3.(실행부에 대한) 제어문
  (1)조건문
  (2)반복문 : for-시작, 끝을 수치값으로 알고있다면..
	   while-범위를 표현시 편하다..

4.
============================================
6일차)
1. 메모리에 데이터 올리기
2. 데이터 처리 방법 결정
3. (실행부) 제어문
4. 함수
	그냥 함수
	매개변수 있는 함수
	return 데이터; 리턴값이 있는 함수
---------------------------------------------------------------------------
배열(Array) // 많은 양의 데이터를 효율성있게 처리하기위해 순서를 부여해 놓는것

5.배열
6.
============================================
7일차)
배열 
현실 : 사물이 순서있게 나열된 상태
전산 : 데이터가 순서있게 나열된 상태(메모리에서)
	순서가 있다는 이유만으로 가져다 주는 장점??
	메모리의 공간에 대한 접근시 이름을 필수로 요하지 않는다. 전체 배열명만 알면된다.
	배열을 이루는 요소가 수치화되어 있기빼문에 프로그램작성시 반복문과 상당히 밀접함.
----------------------------------------------------------------------------
8일차)

객체
============================================
9일차)

절차지향
객체지향 언어( 객체 중심적 사고방식을 표현한 언어)

class{
	변수
	함수{
	}
}
------------------------------------------------------------------------------
객체지향 언어는 현실에 존재하는 사물 및 개념까지도 표현할수있다.
눈에 보이는 것들 뿐만 아니라, 추상적 개념까지도 가능하다..
모든 사물인 명사는 형용사, 동사로 밖에는 표현이 안된다!!!

사물 = 클래스(class)
상태 = 변수(property)
동작 = 함수(function)
=============================================
10일차
1.변수선언 - 컴퓨터에게 일거리 제공(유형: 숫자 문자 논리값)
	  데이터의 생력에따라 전역변수, 지역 변수

2. 연산자 - 데이터를 어떻게 처리할지 결정하는 부호
3. 제어문 - 실행부 제어
	조건문 : 특정영역을 원하는 조건에 따라 수행 여부를 결정(If)
	반복문 : 특정영역을 원하는 횟수만큼 반복수행함  (for-범위를 알때, while-번위를 알수없을때)
4. 배열 - 데이터가 순서를 가지며 메모리에 나열되있는것 
5. 함수 - 재사용성이 높은 코드집합에 이름을 붙여 필요할때 호출하여 사용할수있는 단위

객체 중심적 사고

객체{ 
 변수
 함수
}

사물{
 상태
 동작
}
==============================================
11일차

12일차
--------------------------------------
남이 정의한 객체 사용해보기!!!
자바스크립트에서 사용했던 프로그램 자체에서 지원해주는 객체를 어떻게 하면 자유롭게 사용할수있나?
---------------------------------------
API (Application Programming Interface)
-프로그램 개발시 사용되는 라이브러리

API Document (라이브러리 설명서)

=====================================================
13일차)
DOM( document Object Model)

- HTML 문서가 프로그래밍 언어가 아니기 떄문에 헌타임시 변경이 불가능하다. 따라서 외부 프로그래밍 언어와 의사소통하기 위해서는 HTML문서는 프로그램 차원으로 승격되어야한다.

해결책) 디자이너가 작성하는 모든 태그는 실행시 1:1대응하는 객체를 생성하여 외부의 프로그래밍 언어가 태그 요소들을 제어할수있도록
지원되는 API를 가리켜 DOM이라 한다.

------------------------------------------
자바스크립트 언어
변수
연산자
제어문
배열
함수
객체 - 내장된 객체, 사용자 정의 객체

BOM(Browser Object model
======================================================
14일차)
버전관리 소프트웨어 SVN....GIT....GITHUB
git /sourcetree (git을 마우스로 이용하는 sw) / github


======================================================
15일차)game, DB연동 업무...

Oracle (무료 express, 4G용량제한)
MySQL (커뮤니티 버전만 무료_)

MariaDB....(무료MySQL과 동일 엔진)
======================================================
16일차)
java script의 목적 - html 문서의 동적 제어 /DOM(직접적 문서 제어)

아두이노 
라즈벨 - os 입력가능 
----------------------------------------------------------
js는 html문서 제어뿐 아니라 웹서버 프로그래밍 언어에도 적용되고 있다.
Nodejs )))

IIS- http 프로토콜 기반의 메카니즘(How 운용?)

nodejs - 서버에서 해석 및 실행되는 자바스크립트

전역변수 : __filename, __dirname
전역객체 : console, process, exports

사용자정의 모듈 : 모듈명.js(여러 메서드나 객체를 보유한 집합)
내장모듈의 종류 : 
1. 
http 

--------
웹..

기존의 자바스크립트 - 크라이언트에서만 동작하는 스크립트 언어
nodjs는 실행시점이 서버에서 실행됨.. 서버스크립트.

모듈을 정의할수있고, require
내장 모듈 - url, querystring, os, fs,......
외부모듈 -npm install 모듈명
=======================================================
17일차)
웹서버란 > http프로토콜(tcp/ip)기반으로 사용자의 요청에 응답해주는 SW
-- 

crome  -----> server ------> crome
get : 전송 data 용량이 작고 보안의 필요성이 없을때
post: 전송 data 용량이 크고 보안의 필요성이 있을때


response.redirect("") //괄호 안의 내용으로 재 요청

ejs 모듈 :// html에서 반목문을 가능하게 해주는 모듈

SQL :
CRUD// create : insert 레코드를 생성
read : select 조회
update : 수정
delete : delete 삭제

==========================================================
18일차)
java se - standard edition (응용프로그램) ->네트워크
 - 데스크탑에서 실행되는 모든 응용프로그램(기본 Base)
 -  아래의 두 플랫폼 마저도 SE를 설치해야 한다.
java ee - Enterprise Edition (웹기반 기업용: jsp spring) ->웹
-웹 분야
- 기업용 어플리케이션은 대규모의 배포가 필요
  즉 큼 규모의 다수의 사용자가 이용해야 하므로 
  인터넷 기반으로 간다.

java me - MICRO EDITION (임베디드) //-> 안드로이드 
 - 임베디드 분야(하드웨어 분야) 에 사용되는 자바..
 - 스마트폰 출시 이전 피처폰 시대에 주로 많은 개발이 이루어 졌으나,
  스마트폰 출시 이후 안드로이드에게 밀렸다....

JDK(Java Development Kit) - 자바 개발 도구(환경)
 - 개발 도구 + 실행환경(JRE) 포함되어있다.
JRE(Java Runtime Environment) - 자바 실행환경
JVM(java virtual machine 자바 가상 os)만이 .class라는 바이트 코드라 불리는 기계어를 해석할수있다.
java- encoding ansi로

Dos에서 명령어로 환경변수 보기
echo %환경변수명%

---------------------
프로젝트 발표 
1. 프로젝트 주제 
2. 프로젝트 목표 (달성 수준)
3. 디자인 설계 (어떠한 화면으로 프로그램이 구성될지)
    데이터베이스 설계 (엑셀)
4. 시연 (만든거 보여주기)
5. 평가 및 느낀점 (잘된것, 잘못된점) 

=======================================
19일차)
1. 자바의 개발 플랫폼(자바 언어로 개발할수 있는 분야)
javaSE : 응용프로그램( 실행할수있는 코드가 반드시 유저PC)
javaEE : 기업용 어플리케이션(웹)
javaME : 임베디드 어플리케이션 -->Android로 대체

2. JDK와 JRE란 무엇이고 차이점?
개발환경, 실행환경

3. 자바와 자바스크립트 차이점
	java	javascript
---------------------------------
컴파일여부 : O           X
속도 :         O    >     X
	컴파일언어  인터프리터언어(매 실행떄마다 번역)

4. compile컴파일이란? 원본소스를 기계어로 변환하는 과정

5. 자바의 슬로건인 Write once run anywhere!!의 의미
한번 작성된 자바 프로그램은 해당 플랫폼에 독립적으로 수행될수있다. (OS종류에 상관없이 돌아간다.) 

6. 바이트코드와 자바 가상머신
바이트코드란? .class를 의미하며 오직 JVM만이 해석 기능 (java virtual machine : 자바 코드 해석및 메모리를 관하는 SW)

7. 환경변수란 무엇이고 사용목적은?
OS에 등록하여 사용할수있는 변수를 의미하며 특히 path라는 변수에는 OS가 가동되고 있는 한 언제든 접근이 가능한 전역데이터를 등록할수있다.
어느 위치에서건 등록된 경로를 참조할수있다.

8. 자료형이란 무엇이고, 자바의 자료형의 종류 및 크기는?
데이터의 종류를 의미하여 종류를 구분하는 이유는 메모리에 차지할 데이터의 용량을 결정하기 위함이다.

문자 char(2byte)
숫자 byte1 < short 2< int 4< long8
논리값 boolean (1)

=====================================================
20일차)

자료형이란 데이터의 종류 
why: 사람이 컴퓨터에게 일을 시키기 위해 정의, 메모리에 차지할 데이터의 크기를 설정

작은 자료형 ---> 큰자료형 promotion;
큰자료형 --->  작은자료형 demotion;

int x=3;
byte b = 9;

b=(byte)x;  //강제로 형변환을 시킴-> 강제형변환 
x=b; // 자동으로 현변환(작은 것을 큰것으로 promotion / byte->int) ->자동형변환

*****객체자료형
1. 자바의 자료형 : 기본 자료형(문자 숫자 논리값), 객체자료형[{}]

=====================================================
21일차)

1. 자바의 자료형은 총 4개.. :기본자료형: 문자 숫자 논리값,  사용자정의 자료형 : 객체형
사물 = 객체자료형...이다.
기본 자료형 중 형변환이 서로 불가능한 자료형은 boolean
숫자 = 문자형( 하지만 문자는 숫자 연산에는 사용하기 부적절하다.. 왜? 문자는 매필된는 키보드값이 목적이기 때문)

환경변수 : OS에 등록되는 전역변수 (시스템이 실행되는한 동작한다.)

main() 메서드..  프로그램 시작 시점을 결정하는 실행부...
자바 클래스 자성시 main()은 둬야 하나???
둘경우 - 싱행할수있는 클래스이긴 하나, 클래스의 재사용성은 떨어진다. 
	왜? 자바는 한번 작성된 클래스가 javaSE,javaEE,javaME에 모두 사용될수있는데. 
	main을 두면 SE에 한정되기때문에...

JVM의 메모리 구조
[1 ][2 ][3 ]
[     4     ]
1단계 : static / method 영역 //Class 의 원본코드
2단계 : stack 영역  // 모든지역변수가 담긴다. (Last input First out으로 메모리 관리하는 방법)
3단계 : heap 영역 // 객체 인스턴스
4단계 : 하드디스크

etc)가비지 컬렉터 . 가비지 컬렉션(인스턴스 지우는 행위)

저장 : 4에 .java로 저장 -> ctrl+1 : 4에 .class로 저장 ->
	ctrl+2 : .class를 읽어 1(메모리)에 등록한다. (main()-> int K=5 ->2에 올림, 
	Computer c=new Computer() -> Computer .class(거푸집)가 static에 올라옴 -> c라는 전역 변수가 stack에 공간 할당 
	-> new Computer (Computer 인스턴스를 3에 생성)-> c에 heap의 주소값 등록

=========================================================
22일차)
1. 클래스 작성하는 방법
	클래스란? 변수,메서드로 구성됨..
2. 클래스를 사용하는법
	객체의 인스턴스 생성 (메모리에 클래스 올리는법)
3. 메모리 구조
	static : 정적 메모리 영역 즉, 클래스 원본 코드가 올라간곳!!!
4. 초기화 블럭 
	static 초기화 블럭 : {} 클래스 로드시에 수행
	인스턴스 초기화 블럭 :  {} 각 인스턴스 생성시 마다 수행
------------------------------------------------------------------------------------------------
수업 주제 : 매서드를 배워보자~!!
일반 메서드
생성자 메서드
메서드 이름 중복 선언 (단, 매개변수의 숫자나 자료형이 달라야한다) -> 오버로딩

java 실행시 파일 관리 하기
 .class 파일과 .java파일의 위치를 나누어둠 -> package 사용

java에서는 해당 선언한 package 명에 따른 폴더에 삽입하여 주어야함. 
-> 컴파일시 해당 폴더로 .class파일을 적제하기 위해서 javac -d 경로 파일명 을 등록해주고 컴파일함(ctrl+1)
-> 실행시 해당 .class파일을 참조하기 위해서 환경변수 classpath에 class파일 경로를 등록해줌
-> 실행 java문서에서 .class파일을 참조하기 위해 import 하여줌;
-> 실행 하기 위해 java package.파일명 을 사용자 관리 도구에 등록하여 실행함 (ctrl +2)
===============================================================
23일차)
매서드 
1) 반환형지원
2) 매개변수

생성자? 객체 생성시 초기화를 목적으로 무조건 호출되는 메서드!!
특징)
1. 클래스명과 반드시 일치해야 한다.
2. 생성자의 명시는 개발시 생략이 가능하나, 만약 생략하면 에러가 발생하지 않고, 컴파일러에 의해 디폴트 생성자가 관여한다...
   이때 이 디폴트 생성자의 코드는 최소한의 관여만 하므로, 로직이 없다 (즉, 에러 방지가 목적이다)
3. 반환형이 없다!!!
   만일 반환형을 두면?? 에러가 발생하지 않지만 무시무시한 일이 발생한다.
   why? new 뒤에 오는 생성자로 생각하지 않기 때문에 객체 생성시 호출되지 않는다... 일반 메서드로 인식한다.

-하나의 클래스 내에 메서드명은 중복이 가능하다.(대부분의 유명한 객체지향 언어에서는 추세...)
 overloading(=메서드 중첩) 
 왜?? 메서드 명은 소중하니깐 ... 명명규칙을 힘들게 고민했기때문에 사소한 기능차이로 새로운 메서드명을 지정해야 한다는 것은 상당히 비효율적이다.
 
- call by value (메서드 호출시 값으로 호출)- 변수의 값이 복사되어 전달되므로, 해당 변수는 영향을 받지 않는다.
- call by reference  (메서드 호출시 주소값을 호출) - 변수의 주소값이 전달 되므로, 해당 객체는 영향을 받는다.
-------------------------------------------------------------------------------------------------------------------
접근제한자 / package / import
package : 클래스들을 모아놓은 집합을 채키지라 한다. 왜 모아 놓나? 클래스명의 중복 방지, 관련성있는 클래스들끼리 묶어서 관리하기 위해

개발시 환경 구축
프로젝트/ src           	/패키지/.java file
	bin,classes		/패키지/.class file

import 특정 클래스를 패키지에 넣었을때, 외부의 클래스가 접근하기 위해서는 그 경로를 알아야하는데 이때 사용하는 경로를 지정해놓은 환경변수를 classpath에 지정.
-------------------------------------------------------------------------------------------------------------------
자바의 보안

자바 API문서 만드는 방법
java file 생성시 /** */ 주석 등록을 하면 javadoc생성시 내용이 들어간다

>javadoc -d 생성될 경로 생성할java file 

------------------------------
암시적 생성법에의해 생성된 객체data는 JVM의 heap영역에 상수풀(constin..)에 생성되고 동일 value시에는 추가 작성하지 않고 기존의 존재하는 것을 
상수풀의 목적 > 기존에 있는 것이 있으면 중복생성하지 않고 기존의 것을 가져다 씀 (메모리의 효율성을 위해..)
========================================================================
24일)
1. 접근제한자
  - 자바에서 지원하는 보안 등급을 결정하는 키워드 : private  defalt protected publuic
2. 클래스에서 메서드의 역활 
  - 클레스 내의 멤버변수를 이용(제어)하기 위해 
3. 은닉화
 - 객체 보유한 데이터(변수)는 보호라고 객체가 보유한 데이터에 대한 제어는 개발자가 제공하는 메서드에 의해서 제어하도록 개발법
 - 맴버변수는 private으로 외부의 접근을 막고 이 막혀진 데이터에 대한 조회는 getter로 제공하고, 수정은 setter로 정의한다.
- getter/setter 표기법 : get Or set + 단어(첫 글짜는 대문자) 
// get은 리턴값이(ex> public String getName(){}) 있고 set은 수정이기 떄문에 리턴값이 없다.(ex> public void setName(String name){})

4. API Document의 뜻과 문서 html 생성법
 - API : 어플리케이션 제작을 위해 제공되는 라이브러리...
 - javadoc 주의 ) java의 클래스는 public으로 선언되어있어야 한다.
5. API 활용 밥법 실습
-  rt.jar (jar >> java archive : 클래스파일 압축)
- .class 의 집합이므로, 메서드와 변수를 개발자가 알수없으므로 API문서를 참조 해야한다.
6.

7. 자바에서 배열은 객체취급한다.
ex; String[] arr = new String[4]; // 자바에서 배열은 선언시 그 크기를 선언해줘야한다.
8/ main() 메서드 호출시 매개변수에 대해서..
9. has a 관계!!
- 현실을 제대로 반영하려면 , 객체 단독으로는 개발이 불가
10. call by reference 
메서드 호출시 메개변수의 데이터가 주소값일떄 해당 메서드에서 데이터 변경시 해당 인스턴스의 상태가 변경되므로 주의 해야한다.
-------------------------------------------------------------------------------------------------------------------------------------------
개발시 객체와 객체는 관련성을 맺는다...
1. has a
2. is a : 상속

[로직 작성시 메서드 정의 기법]
오버로딩 : 하나의 클래스 내에서..
	같은 클래스 내에서 기능이 비슷한 메서드가 있다면, 새롭게 이름을 부여하지 말자~
오버라이딩 : 상속관계에 있는 클래스
	이미 부모의 메서드에 정의되어 있다 하더라도, 자식 클래스에 그 메서드를 재정의 하자~ (즉 , 업그레이드..!!)

--------------
오버 라이딩시 하위(sub) 인스턴스 생성시에는 상위(super)인스턴스가 받드시 먼저 생성이 이루어져야한다.
그렇기 때문에 자바에서는 하위 생성자가 선언시 자동적으로 기본적인 상위 생성자를 호출이 되어진다.
하지만...상위 생성자가 사용자 정의로 매개변수가 있게 정의 되어있을시에는 기본적인 상위 생성자를 호출하기때문에 없는 메서드라 인식이 되어 Error가 발생되어진다.
그렇기 때문에 상위 생성자가 사용자 정의가 되었다면 하위 생성자에서 반드시 정의된 상위 생성자를 호출해주어야한다.
이때 상위 생성자 호출 정의를 super();라 표현하며 사용자 정의된 표기에 맞게 매개변수를 넣어주면 된다.
그리고. 상위 생성자 호출후 하위 생성 초기화가 이루어 져야하기 떄문에 하위 생성자에서는 상위 생성자 호출전에는 아무런 코드(초기값설정)를 할수없다.!!!!! 

ex)
public class Duck extends Bird(){
 // 생성자 미정의시
 public Duck(){
   super(); // Bird의 생성자가 Bird()로 정의 되어있거나 미정의시 오류 미발생 but Bird(int age){}시 super(3);이라 작성되어야함!!
 }
}

------------
다형성이란? 같은 자료형으로 호출한 메서드가 서로 다른 동작을 할때를 표현한다.
1. 오버로딩에서의 다형성 : 같은 명의 메서드를 정의할때 해당 메서드의 매개변수 갯수 자료형을 다르게 하여 정의시 이를 오버로딩이라 한다.
이때 메서드를 사용하면 같은명의 메서드라도 매개변수에 따라 서로 다른 동작이 이루어 지므로 다형성을 이루어지게 한다.  
2.상속간의 다형성
즉, 상속간의 Class에서 오버라이딩이 이루어져있을시에 해당 메서드를 호출하더라도 각각의 호출한 클래스(객체)의 메서드가 호출되어 서로 다른 동작을 이루어진다.
========================================================
25일)
1.(객체와 객체간)관계의 종류 
- has a 관계 : 부품 관계
- is a 관계 : 상속(부모 자식) 관계
2. 상속 
 자식 클래스가 부모클래스의 능력을 부여 받는것 
-> 부모 클래스의 속성과 메서드를 사용할수있는 개발 방법
-> 즉 자식이 자신이 가진 속성과 메서드 이외에 부모의 영역까지 확장하였으므로, extends로 표현한다.
-> 부모 클래스가 인수있는 생성자만 보유할경우 자식 클래스 생성자 호출시에도 부모클래스의 생성자 형태로 호출을 해줘야 오류가 발생하지 않는다.

3. 자바의 최상위 객체
Object - equals() ....

4.오버라이드 (업그레이드)
- 상속 관계에서 자식 클래스가 부모클래스의 메서드를 재정의하는 메서드 저으이 기법
5. 객체간 형변환
- 기본 자료형간 형변환 가능하다.
- 객체 자료형간 형변환 가능한가? 객체형도 자료형이니깐 가능하다.
주의!!!
기본자료형간 형변환시엔 크기가 중심이다. 하지만 객체 자료형에서는 객체가 레퍼런스할수있는(포함할수있는) 대상이 넓다면 그게 큼 자료형이다
결국 부모가 더 크다.
6. 다형성
하나의 자료형으로 여러가지 다양한 동작을 일으키는 기법
7. Wrapper클래스
기본자료형과 객체 자료형간의 형변황을 지원하기 위한  클래스가 Wrapper클래스이다.

자바의 기본자료형은 1:1 로 객체로 변환될수있는 클래스가 지원된다!!!

기억살리기 int -> Integer.parseInt()!!!! //  String a = "123"; => int b = Integer.parseInt(a); 
--------------------------------------------------------------------------------------------------------
추상 메서드 abstract
추상 메서드가 있는 Class -> 추상클래스
// 속성에는 {} 몸체가 없기때문에 추상화가 필요없다 그러므로 abstract는 속성에 붙지 않는다.

인터페이스(interface) .. 기능(메서드)만을 모아놓은 것 why?? 클래스는 다중상속을 할수없다. 하지만 현실의 객체들은 다중상속의 개념이 필요함으로 다중 상속과 같이 인터페이스를 통하여 표현한다.
즉~ 인터페이스는 클래스가 아닌 기능 모음이기 때문에 다중 상속이 가능하다.
ex)  implements 1,2,3,4,5...

수정자 ! static / abstract / final

final - final로 지정된 속성은 프로그램이 종료 시까지 데이터 변경이 불가능하다. 그러므로 주로 상수정의에 사용된다.
상수 - 프로그램이 시작하여 끝날때까지 데이터값의 변환이 없는 것 
	특징 1. 데이터 변화가 없다 .2. 모든 인스턴스에 공유되어야한다. 3. 모든 객체에서 사용할수있어야한다.
		final 	/ 	static 		/	 public

tip >
1. 자바의 속성이나 메서드 선언시 순서는 [기타- 자료형 -이름(명)] 즉 , 속성or 메서드명 앞에 자료형이 오고 그전에 오는 접근제한자, 수정자,... 순서는 크게 상관없다
2. Int를 String으로 형변환하기 위해서는 Integer내의 toString()메서드를 이용하여 한다.
3. java의 GUI에 관한 Class들은 대부분 awt package안에 정의가 되어있다.
ex) Frame, TextArea, TextFeild, Choicebox, Button etc......
=======================================================
26일)
1. 추상클래스?
- 불완전한 클래스
- 클레스를 불완전하게 하는 방법: 클래스 내의 메서드 몸체를 없이 정의
- 사용이유: 클래스 정의 그내용을 확정지을수없거나 확정지어서도 않되는 경우 즉, 계획 단계에서 사용될수있는 클래스..

2. 인터페이스 : 기능만을 보유한 객체
	클래스가 아니므로 현실의 다중성을 반영하기에 적절....
3. extends, implements => is a 관계 
	A extends B => A와 B는 같은 종류의 자료형
	A implements =>  A와 B는 같은 종류의 자료형
4. 상수 
	현실 :  상수 = 숫자
	전산 : 상수란, 프로그램이 끝날때까지 그값이 변하지 않고 유지되고 있다면 상수라한다.
		따라서 상수가 될수있는 것은 자바의 모든 자료형은 상수가 될수있다.
	특징 : public static final
		모든 인스턴스에 공개 되어야한다.
		모든 인스턴스에 공유되어야 한다.
		그 값이 변하지 않아야 한다.
5. GUI API 지원한다.
	윈도우 -Window -> Frame

화면 배치 ~
BorderLayout
FlowLayout
GridLayout
GridbagLayout
CardLayout
===========================================================
27일)
GUI(어플리케이션을 그림으로 구현하는 방식)
CLI(Command Line Interface) - Dos, SQLPlus
GUI 프로그래밍  - 윈도우 프로그래밍
결론 - 자바 언어에서도 윈도우 프로그래밍을 지원한다!!!
--------------------------------------------------------------------------
GUI 컴포넌트의 분류
(Container)컨테이너-남을 포함하는 컴포넌트 JFrame,  Jpanel, Applet
(Visual Component)비주얼 컴포넌트 - 포함당하는 컴포넌트

레이아웃 관리자
- 모든 컨테이너는 자신의 몸체에 컴포넌트들을 어떻게 배치할지를 고민하므로 , 5가지 유형의 배치관리자가 지원된다.
JFrame : 디폴트 - BorderLayout
JPanel : FlowLayout
Applet : FlowLayout
-Frame 내에서의 부분적 레이아웃 적용하기 위해서 Jpanel을 이용하여야 한다.

이벤트 
Click -> Action
주의 !!! Action은 버튼에만 부여할수있는게 아니다.
html도 Click을 button에만 적용하지 않았다.

이벤트 처리과정 
이벤트 발생 -> OS  -> JVM --> 메모리에 해당 이벤트의 인스턴스를 생성 -> 해당 이벤트 리스너한테 전달... ()-> 

API Document

자바의 객체의 유형
1단계 ) 객체의 종류를 파악!!
일반클래스
추상클래스
인터 페이스 

2단계 ) 생성하는 방법을 결정하라
일반클래스 - new 한다.
추상클래스 - 자식에서 완성한후 자식을 올린다!!!
인터페이스 - 자식에서 완성한후 자식을 올린다!!!

3단계 ) API 상의 각종 메서드 적절하게 적용

--------------------------------------------------------------------------------------------------------------------------

* java의 내부익명클래스(inner Anonymous Class)

java에서는 Interface 를 상속받는 클래스를 생성할때 자식클래스를 .java파일로 만들지 않고 내부 선언시에 해당 클래스를 내부익명클래스로 선언하여 
사용이 가능한다.
ex)
버튼 -> 클릭 이벤트를 implemenets 이면 해당 버튼을 새로 .java 클래스로 만들지않고
JButton bt = new JButton("버튼");
bt.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent e) {} );
//bt에 ActionListener가 장착된 익명 클래스를 추가함.....!!!!

* 오버라이딩시 부모의 보안보다 강화시킬수없다
========================================================================
28일)
자바의 그래픽 처리
- 주체(화가) : 컴포넌트
- 행위 : paint() 메서드
- 그래픽스타일 : Graphics ( g.draw*() )
- 손대지 말하야할 컴포넌트 : JButton , JtextFlied, ...
- 손대야할경우 : 텅 빈 컴포넌트... : Canvas, JFrame, JPanel..

내부입력클래스
- 클래스 안에 선언할수있는 이름없는 클래스
- 언제 쓰나? .java소스로 분리시켜 놓기에는 재사용성이 떨어지는 경우
------------------------------------------------------------------------------------------------------------------------------
JTable

==========================================================================
29일)
컬렉션 프레임워크(collection framework)
모음 수집
컬렉션프레임웍에서 수집,모음의 대상은 객체이다.!!!!

java.util
순서있는 객체를 처리하는데 유용한 List계열 
- ArrayList(거의 배열과 동일 / 
차이점 !!! 크기가 동적 변경된다. 
	처리할 데이터는 객체에 한정)
ArrayList에 숫자를 넣고 싶다면???
원칙 -> 3 --> Integer(3);
예왜 : 자동으로 객체화 시켜준다. Auto  Boxing
순서없는 객체를 처리하는데 유용한 Set계열
HashSet구현...
모든 요소를 출력하려면 일렬로 늘어뜨려야 한다.
iter

hasnext() 다음요소의 존재 여부를 판단 true / false
반복문의 범위를 정해줌
next() 다음요소로 접근 
순서없이 Key-value의 한쌍으로 모아진 데이터를 처리하는데 유용한 Map계열
----------------------------------------------------------------------------------------------------------------
JTable -->

개발 방법 이론이 반영되어 있다. 
디자인과 로직은 분리시켜 개발해야 한다!!! 
왜?? 유지보수성이 좋아진다. -> 개발자에겐 업무의 효율성이 사장님에겐 비용이 절약되기 떄문에 유지보수성을 높여야한다.

--------------------------------------------------------------------------------------------------------------------
파일 복사하는 기능을 만들자!! 
복사 = 원본의 모든 정보를 그대로 복원한것. // 파일의 기본단위 Byte를 복사해서 복원하는것...
이론 ///

data(Byte) 
Input ouput // 입력과 출력은 실행중인 프로그램을 기준으로...

예외처리의 목적은? 비정상종료의 방지!! <Exception>
try(){
}catch(){
}finally{
예외 처리시 try문이건, catch문이 수행된 이후 무조건 처리해야 할 로직이 있다면 finally에서 작업해준다.
finally란? try문이나 catch문을 진입한 실행부는 반드시 finally에 도달하게 되어있다!!따라서 반드시 처리해야 할 작업에 사용될수있다.
사실상 거의 대부분 db 닫는작업, 스트림 닫는 작업에 압도적으로 많이 사용됨~
}

====================================================================
30일)

Stream (흐름)
- 현실 : 대상이 물
- 전산 : 대상이 데이터
- 방향 : 절대적? 상대적?
	실행중인 프로그램을 기준으로 
	입력(Input) : 데이터가 들어오면
	출력(Output): 데이터가 나가면
	IO
- Stream을 이용한 경우
  파일 복사, 바코드 리더기, 프린터, 모니터, 마우스 등등 
- 스트림은 java.io 패키지에서 지원
-----------------------------------------------------------------------------------
Exception(예외 -> 정상수행이 될수없는 예외적 상황)

실행시 에러 가능성이 다분한 코드 영역은 try문으로 감싸고, 이 영역에서 에러상황이 발생하면 원칙상 프로그램의 비정상 종료가 발생하게 된다.
따라서 비정상종료를 방지하기 위한 블럭인 catch문을 마련하여 실행부로 하여금 정상 수행을 유도..
catch문에서 작성할 내용은?
정상수행을 유도해 내거나, 비정상 수행의 원인 공지!!!!

- 프로그램에서 예외상황은 SUN에서 정해놓은 것만 예외다!!
- 예외가 발생하면 JVM 의 메모리영역에 해당 예외 객체가 올라오고, catch(예외객체) 
e.printStackTrace() - 예러에 관한 내용을 Stack

스트림
-문자기반 스트림  : 2byte 씩 이해하는 스트림 reader/writer
-바이트기반 스트림 : 1byte씩 이해하는 스트림 input/output

-버퍼기반스트림 : 일정 공간 메모리(버퍼)에 쌓다가 줄바꿈 문자를 만나면 버퍼에 쌓인 데이터를 한번에 읽어들임 

MavenRepository>> 
========================================================================================
31일)
--- 현재 나간 진도 -----
자바문법
GUI
컬렉션프레임웍
스트림
-------------------------
json - > 외부 라이브러리 (클래스 집합=jar)

classpath 등록 -> 이클립스는 자동으로 등록
-------------------------
쓰레드
 * 윈도의 멀티케스팅
 *  - 하나의 윈도우 내에 동시에 여러 프로세스를 실행시키는 방법
 * 
 * 멀티쓰레딩
 * - 하나의 프로세스내에서 독립적으로 실행될수있는 세부실행 단위를 쓰레드라 하면,
 *   이러한 쓰레드를 여러개 수행시키는 방법을 멀티 쓰레딩이라 한다.
Runnable - JVM이 올라온쓰레드 처리하는 공간
NonRunnable - 
run이 끝나면 쓰레드는 죽는다
 
==========================================================================================
32일)
JTable 
 - View Controller Model 방법론이 반영된 컴포넌트 MVC(디자인과 데이터를 나눠서 개발한다.)
 
 - View : JTable 은 껍데기에 불과함
 - Modek : 개발자가 작성하면 됨..
 - Tabel Model : JTable에게 보여질 정보를 전달함

스트림 (흐름)
 - 데이터의 흐름.
 - 방향성에 따라 - 입출력으로 나누어짐
- 처리방법따른 구분
1byte씩 이해 : 바이트 기반 (기본 스트림) -> 영문자 처리, 모든 스트림 처리시 사용가능
2byte씩 이해 : 문자 기반 스트림 -> 단점: 한문자씩 입/출력 되므로 read() 비번하게 발생!!
~reader
~Writer
버퍼처리된 스트림 : Buffered~~접두어 -> 입력이 표시되기 전까지 입력을 일으키지 않고, 메모리의 버퍼라는 임시공간에 담아둠..
				따라서 입력행위가 비번하지 않다!!

 쓰레드
- 하나의 프로세스내에서 독립적으로 실행될수있는 세부실행단위!!!! 

Runnable -> 실행될 쓰레드가 올라오는 공간 즉 Running이 될수있는 쓰레드 후보들
NonRunnable -> 쓰레드에 Sleep명령어를 통해 Runnable공간에서 벗어나게 함.

쓰레드를 구연하는 방법 : - -.java로 만들기 2. Runnable로 만들어 Thread에 연결하기 3. 내부클래스로 정의

게임프레임웍-> 외국게임개발방법//Thread를 1개로 여러 객체를 욺직임.. 
---------------------------------------------------------------------------------------------------------------------------
에댑터 : 인터페이스에 구현할 메서드가 많을때 그 추상 메서드를 미리 구현해놓은 추상클래스
--------------------------------------------------------------------------------------------------------------------------
구현할 인터페이스가 3개 이상의 재정의 메서드를 보유할경우 사용하지도 않는 메서드를 코드상으로 존재시켜야하는
불합리한 경우가 발생하게 된다.!!
해결책) sun 에서는 어댑터라는 클래스를 통해 해결한다.
** 게임에 등장하는 모든 사물이 공통적인 특성과 동작을 보유하고 있으므로,
각 객체마다 일일이 특성및 동작을 정의하여 코드를 중복하지 말고, 최상위의 공통적 부모 클래스를 정의하여
코드의 재사용을 시도해보자!!
--> 객체들을 하나의 컬렉션에 담아서 객체들을 관리하는 Manager를 통해 추가 삭제한다.!!
======================================================================================
33일))
추상클레스 - 불완전한 클래스 / 추상 메서드(메서드의 몸체 브레이스가 없는)를 가진 클래스
	실수가 아닌 의도에 의해 정의 /

========================================================================================
34일)
thread : 프로세스의 기본단위로 각 프로세스에는 한개의 메인 쓰레드가 동작하고 있다.
	하지만, 메인 쓰레드만으로는 동시에 여러가지 일을 처리할 수가 없기 때문에
	개발자는 또 다른 쓰레드를 만들어야만 한다.
	이 쓰레드에는 run(),start(), sleep() 함수등이 있다.
runnable 영역 : os가 프로세스의 따귀를 치면 프로세스는 자기가 소유한 쓰레드의 따귀를 친다.
	하지만 이때 프로세스는 생성된 모든 쓰레드를 치는 것이 아니다.
	즉, runnable 영역에 들어온 쓰레드들 만을 친다.
run() : 쓰레드가 runnable 영역에서 실행될 코드를 정의하는 함수다.
	run 함수는 run 함수 끝 브레이스를 만나면 종료 되고 쓰레드도 종료된다.
start() : 쓰레드를 runnable영역으로 밀어 넣어 쓰레드의 run 함수가 실행되게 한다.
sleep(1000) : runnable영역에 들어가 있는 쓰레드를 설정된 시간동안 잠시 runnable영역밖으로 보낸다.
	
runnable;인터페이스 : 쓰레드 클래스에서 run함수만을 가져온 인터페이스다. 이 인터페이스를 사용하기 위해서는
run함수를 재정의 하고 이 인터페이스가 implements가 된 클래스를 Thread생성자의 인수로 넣어 
이미 run 함수를 재정의 하였기 때문에 Thread 클래스에서 run을 재정의 할 필요 없이 Thread 인스턴스에서
start함수만 사용하면 된다.
runnable인터페이스를 사용하는 이유는 extends는 한개만 가능하므로 이미 다른 클래스를 상속받아서
Thread 클래스를 상속받지 못하기 때문이다.
========================================================================================
35일)
프로젝트시엔 산출물이 꼭 나와야 한다
DB 설계 후 산출물 = Entity Relation Diagram(객체관계도)

ERWin(유료)
========================================================================================
36일)
데이터베이스 관련 정보를 자바 소스내에 두지 않음..
why? 유지보수성때문에..

외부파일로 두되, javaSE 이해할 수 있는 형태로 데이터 작성
key-value를 이해할 수 있는 Map 자식 중 Properties를 이용해봄
Properties는 외부파일을 인식시키려면, FileInputStream
-------------------------------------------------------
java 소스 이외의 자원들을 클래스패스에 둬도 된다.
장점? 자원에 대한 접근을 하드 드라이브 full경로 접근하는 것이
아니라, 프로젝트를 기준으로 한 클래스 패스를 기준으로 
접근할 수 있다.

이때 주의할 점
com.sds.shopping.db  -> com/sds/shooping/db파일명.확장자로 작성

xml이란? 텍스트기반의 데이터베이스 
ex) 공공데이터 공공의 프로그램에 많이씀 
버스 / 지하철 어플등...
========================================================================================
37일)
웹프로그램 jsp 
1.문법구성 
 (1) jsp를 기재할 수 있는 영역
     - 지시영역 <%@ 인코딩 지정%> <%@ 임포트%> 
     - 선언부 <%! 멤버영역%>
     - 스크립틀릿 <%로직을 작성하는 영역%>
 (2) 자바의 문법을 따른다.
 
2. jsp에서 jar, class 사용하는법 
    지정된 경로에 파일을 둬야 한다.
    웹사이트/WEB-INF/lib -- jar
    웹사이트/WEB-INF/classes --.class

    WEB-INF는 브라우저로 즉 클라이언트가 접근할 수 없다. 보안폴더이기때문에..

    jsp에서 사용할 jar, class의 위치는 그 위치가 정해져있다.(sun사에서 정함)
    sun의 스팩을 모든 서버 제조사들이 따르는 것이다.

3.jsp 실행원리
 - jsp는 클라이언트가 브러우저로 접속시
   서버에서 실행되어 버린다...
1)보안
2)동적 컨텐츠 생성
-----------------------------------------------------------------------------------------
자바스크립트와 jsp의 차이점
jsp : 서버측에서 실행
javascript : 클라이언트 측의 브라우저
=========================================================================================
38일)
javaEE
--------------------------------------------------------
jsp는 결국 서블릿이었다!!
jsp는 왜 창조되었을까?
웹기술은 원래 서블릿밖에 없다. 하지만, 간단한
디자인 마저도, 클래스로 구현해야 한다면 효율성이 너무 떨어진다.
ASP,PHP에 경쟁이 되지 못함.
클래스에 대한 지식이 없더라도, 간단한 문법만 숙지하면
자바기반의 웹어플리케이션을 지원하기 위해..
but jsp모든 코드는 실행 직전에 클래스화 된다.
그리고 이 작업은 누구하나? 웹컨테이너.....
--------------------------------------------------------
서블릿의 생명주기 
init()
service(요청객체,응답객체) : 요청을 처리하는 메서드이다.
get --> doGet(요청객체,응답객체);
post --> doPost(요청객체,응답객체);

destroy()

브라우저로 접근할때의 루트란? - http:// ~~~:9090/ 이런것들
=========================================================================================
39일)
클래스에는 반드시 로직을 넣어야 한다? No.

DTO, VO --> 자바용어 아님

DAO
코드의 재사용성을 높이기 위해 로직을 객체를 분리시켰다.(CRUD)
CRUD만을 전담하는 객체를 가리켜 DAO 

업로드라는 기술이 직접 개발할 경우 
시간이 소요되므로..(실력이 x)
이미 잘 제작된 외부 라이브러리, 즉 컴포넌트를 사용해본다!

자바분야에서 잘 알려진 업로드 컴포넌트 
(무료)
1.apache 제작된 업로드 컴포넌트

2.orellily사에 책편저할때 제작한 컴포넌트
  Multipart 업로드 컴포넌트 cos.jar
  http://www.survlets.com

=========================================================================================
40일)
jsp 게시판
---------------------------------------
DAO - CRUD를 전담하는 객체
DTO, VO - 레코드값을 담는 객체
---------------------------------------
Paging 처리 기법

1.Notice 공지게시판
2.댓글 게시판
3.답변 게시판(계층형 게시판)
4.Cascading 게시판(답변의 갯수를 표시)
5.갤러리 게시판
---------------------------------------
쇼핑몰
---------------------------------------
개발방법론(MVC 패턴)
---------------------------------------
Spring 프레임웍 
---------------------------------------
JQuery + Ajax
---------------------------------------
템플릿 : bootstrap(프론트 프레임웍) 
Spring RESTful - 디바이스에 상관없이 데이터를 처리함.
41일)
=========================================================================================
jsp 게시판
---------------------------------------
DAO - CRUD를 전담하는 객체
DTO, VO - 레코드값을 담는 객체
---------------------------------------
Paging 처리 기법

1.Notice 공지게시판
2.댓글 게시판
3.답변 게시판(계층형 게시판)
4.Cascading 게시판(답변의 갯수를 표시)
5.갤러리 게시판
---------------------------------------
쇼핑몰
---------------------------------------
개발방법론(MVC 패턴)
---------------------------------------
Spring 프레임웍 
---------------------------------------
JQuery + Ajax
---------------------------------------
템플릿 : bootstrap(프론트 프레임웍) 
Spring RESTful - 디바이스에 상관없이 데이터를 처리함.
42일)
=========================================================================================
1.자바코드안에 데이터베이스 정보를 두지않음 외부의 자원에 둠.
Java Naming Directory Interface-

2.공인된 커넥션풀링 기능을 이용하자.
DataSourece

43일)
=========================================================================================
업로드 컴포넌트(유,무료)
- Oreilly사
cos.jar MultipartRequest

-Apache.org
commons - fileupload
	- io

-Thumnail
 원본을 원하는 크기로 그려냄
 BufferedImage --> 파일아니다!!!!!!! 메모리에 올라온 그래픽 객체
		   그래픽 처리가 끝난 후, 파일로 저장..
ImageIO.read(File 객체) - 파일 읽을때
ImageIO.write(File 객체) - 파일 저장시

44일)
=========================================================================================
Ajax (비동기 자바스크립트와 xml)

[웹기반 일때]
비동기 - 불안정

동기 - 클라이언트의 요청이 있을 때, 서버가 이 요청에 대해
	응답을 처리할 때까지는 클라이언트가 대기상태에 빠지는 처리방식
	안정적
------------------------------------------------------------------------
XMLHttpRequest
스탠다드 vs MS
new ActiveXObject("Micosoft.~~");

















